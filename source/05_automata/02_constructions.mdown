# Automaton constructions

## Intersection

Given two FSAs $A$ and $B$ that recognize the languages $L(A)$ and $L(B)$, respectively, one can construct an automaton $A \cap B$ that recognizes $L(A) \cap L(B)$.
This shows that the class of regular languages is closed under intersection.
Closure under intersection is an incredibly valuable property because it means that a complex pattern can be factored into simpler patterns such that the intersection of all the simple patterns produces the complex pattern.

The construction of $A \cap B$ is actually fairly simple as it all amounts to constructing an automaton that runs $A$ and $B$ in parallel.
But one thing after another:
intuitively, a string $s$ is in the intersection of $L(A)$ and $L(B)$ only if there is an accepting run of $A$ over $s$ and an accepting run of $B$ over $s$.
So if we were to run $A$ and $B$ in parallel, both would have to end up in a final state.

Let's imagine this in an even more visual manner. 
Suppose our automata $A$ and $B$ are as below.

\input_med{abaa.tikz}
\input_med{modulo4_ab.tikz}

Here $A$ recognizes strings of the form $\String{a(baa)^*}$ (where $^*$ means 0 or more iteration of the bracketed part).
And $B$ recognizes any string over $a$ and $b$ whose length is a multiple of $4$.
So $abaa$ would be recognized by both and thus in the intersection of $L(A)$ and $L(B)$, whereas $a$ would be rejected by $B$ and $abab$ would be rejected by $A$.

Now imagine that you put your left index finger on the initial state of $A$, and your right index finger on the initial state of $B$.
Move your fingers in parallel as you move along with the symbols in $\String{abaa}$.
So after the first $a$ your finger moves from $0$ to $1$ in $A$, and from $0$ to $1$ in $B$.
Then the $b$ pushes your finger from $1$ to $2$ in $A$, and similarly in $B$.
After the next $a$ your finger moves from $2$ to $0$ in $A$, and from $2$ to $3$ in $B$.
Finally, the last $a$ shifts you from $0$ to $1$ in $A$, and from $3$ to $0$ in $B$.
Both are final states, and thus the string is recognized.

Based on this intuition, we construct an automaton where each state keeps track of the position of our fingers in these two automata.
For the string above, we start out in $0,0$ and move to $1,1$ with an $a$ transition.
After that a $b$ transition moves us to $2,2$, from which another $a$ gets us to $0,3$, and from there to $1,0$.
For any two states $a,x$ and $b,y$, there is a $\sigma$-transition from $a,x$ to $b,y$ iff there is a $\sigma$-transition from $a$ to $b$ in the first automaton and a $\sigma$-transition from $x$ to $y$ in the second automaton. 
Furthermore, a state $a,x$ is initial iff both $a$ and $x$ are initial, and it is final iff both $a$ and $x$ are final.

Applying this construction to the two automata above yields the following:

\input_med{intersection_automaton.tikz}


\begin{definition}
Let $A \is \tuple{\Sigma, Q_A, I_A, F_A, \Delta_A}$ and $B \is \tuple{\Sigma, Q_B, I_B, F_B, \Delta_B}$ be two FSAs.
The *intersection automaton* $A \cap B$ is the FSA $\tuple{Sigma, Q_A \times Q_B, I, F, \Delta}$ such that

<ol>
<li>$\tuple{a,x} \in I$ iff $a \in I$ and $x \in I$,</li>
<li>$\tuple{a,x} \in F$ iff $a \in F$ and $x \in F$,</li>
<li>$\tuple{\tuple{a,x}, \sigma, \tuple{b,y}} \in \Delta$ iff $\tuple{a,\sigma,b} \in \Delta_A$ and $\tuple{x, \sigma, y} \in \Delta_B$.</li>
</ol>
\end{definition}

\begin{theorem}
For all FSAs $A$ and $B$ there exists an FSA $C$ such that $L(A) \cap L(B) = L(C)$.
\end{theorem}

\begin{exercise}
In an earlier exercise you had to construct FSAs for $\String{a^* b^+}$ and $\String{a^+ b^+ a^*}$.
Construct their intersection automaton and verify that it recognizes the language $\String{a^+ b^+}$.
\end{exercise}


## Determinization

Notice that nothing in our definition of FSAs prevents $\Delta$ from containing two transitions of the form $\tuple{q, \sigma, u}$ and $\tuple{q, \sigma, v}$.
In this case, a single string containing the symbol $\sigma$ may have multiple runs because we can move from $q$ to $u$ or to $v$.
Such an automaton is called **non-deterministic**.
Automata for which this not the case are called **deterministic**.

\begin{definition}
An FSA $\tuple{V, E, c, \ell}$ is **non-deterministic** iff there are edges $\tuple{u,v}$ and $\tuple{u,w}$ such that $u \neq w$ and $\ell(\tuple{u,v}) \cap \ell(\tuple{u,w}) \neq \emptyset$.
Otherwise it is **deterministic**.
\end{definition}

\begin{example}
The familiar automaton below is non-deterministic because there are two distinct arcs out of $0$ that are both labeled $a$.

\input_med{./nondet.tikz}

Formally, $\ell(\tuple{0,1}) \cap \ell(\tuple{0,2}) = \setof{a} \neq \emptyset$.
\end{example}

\begin{exercise}
Construct a non-deterministic automaton that recognizes the language $ac^*b \cup acb^*a$.
\end{exercise}

Determinism is a very desirable property.
Not only does it simplify certain proofs, it also is essential for efficient recognition.
With a deterministic automaton, recognition proceeds in real-time.
Just as in a prefix tree, we can immediately start moving through the automaton as the symbols of the string are read in.

With a non-deterministic automaton, recognition is more complex.
Suppose we reach a fork where we could move from $u$ to $v$ or $w$.
We could try $v$, and if we're lucky this is the correct path.
But if we do not make it to a final state along this path, we have to backtrack to $u$ and try $w$ instead.
Since each state may have many different choice points, recognition becomes much slower.
If every state has at most $m$ choice points, recognition of a string of length $n$ can take up to $m^n$ steps.
That is truly awful, with $m = 4$ and a short string of length $5$ this may already require $4^5 = (2^2)^5 = 2^{10} = 1024$ steps instead of just $5$.

An alternative to this kind of serial search is to do parallel search: whenever we reach a state with $m$ choices, we make $m$ copies of the automaton and each copy proceeds along of the possible paths.
Now recognition can again proceed in real-time (modulo the cost of spawning copies of the automaton), but we consume a lot of memory.
This situation is very common in software engineering, and it is known as a time-space tradeoff: either we do it slow but memory-efficient, or we do it fast but at a much higher memory cost.

The copy-spawning idea can be compiled directly into a non-deterministic automaton by **determinizing** it.
The idea isn't too dissimilar from the construction of the intersection automaton: each state consists of multiple components that encode the state of one of the spawned copies.
The construction makes some tweaks though to reduce state bloat.
If one were to represent the state configuration of $m$ copies of the FSA as an $m$-tuple of states, then one could easily end up with $m$-tuples that contain many redundant components.
For example, the states $\tuple{u,v,u}$ and $\tuple{u,u,v}$ encode the same information: one copy is in state $v$, the other two in state $u$.
Since all copies are exactly the same automaton, there is no point in maintaining two copies that are both in state $u$.
Instead, states are chosen from $2^Q$.
A state like $\setof{u}$ encodes that we only need one copy of the machine, which is in state $u$.
If we then transition from $\setof{u}$ to $\setof{v,w}$, that is tantamount to saying "we had a single automaton in state $u$, and then we spawned a copy so that we now have one automaton in state $v$ and one in state $w$".
And if we switch from $\setof{v,w}$ to $\setof{x}$, this means that both copies of the automaton moved into state $x$ so we destroyed one of them because it had become redundant.

\begin{definition}
Let $A \is \tuple{\Sigma, Q, I, F, \Delta}$ be a non-deterministic FSA.
Then the *determinization* of $A$ is the FSA $\mathrm{Det}(A) \is \tuple{\Sigma, 2^Q, 2^I, F_D, \Delta_D}$ such that

<ol>
<li>$\setof{q_1, \ldots, q_n} \in 2^Q$ is a member of $F_D$ iff $q_i \in F$ for some $1 \leq i \leq n$,</li>
<li>$\tuple{u, \sigma, v} \in \Delta_D$ iff $v \is \setof{ q \in Q \mid \tuple{p, \sigma, q} \in \Delta \text{ for some } p \in u}.$</li>
</ol>
\end{definition}

When manually determinizing an FSA, it is best to follow this incremental procedure:

- Construct a new set $I'$ of initial states that is the powerset of the automaton's original set $I$ of initial states.
- Suppose you have a state $q$ = {$q_1$, $\ldots$, $q_n$}.
  For every symbol $\sigma \in \Sigma$, do the following:
    - Look at $q_1$ and write down which states can be reached from $q_1$ via $\sigma$. 
    - Look at $q_2$ and write down which states can be reached from $q_2$ via $\sigma$.
    - Keep doing this for all $q_i$.
    - The new state reachable from $q$ via $\sigma$ is the set of all the states you wrote down.
- Keep following this procedure until no new states are added anymore.
- Among the states of the deterministic automaton you constructed, the final states are those that contain at least one final state of the non-deterministic automaton.

\begin{example}
The language $a^+$ is recognized by the two automata below.
The first one is deterministic, the second one non-deterministic.

\input_med{./aplus_det.tikz}
\input_med{./aplus_nondet.tikz}

Let's apply the determinization procedure to the non-deterministic FSA.
It's set of initial states contains only $0$, so we only get one initial state $\setof{0}$.
Our alphabet only contains $a$, so we only need to figure out where $\setof{0}$ may lead.
From $0$, $a$ can take us to $0$ or $1$.
So in the determinized automaton, $\setof{0}$ has an $a$-arc to the state $\setof{0,1}$.
Next we look at where we can go from $\setof{0,1}$ with $a$.
In order to do so, we have to figure out were we can go from $0$ and $1$ in the non-deterministic automaton.
We already know that $0$ can lead to $0$ and $1$ via $a$.
From $1$, on the other hand, we cannot go anywhere with $a$.
So from $\setof{0,1}$, $a$ leads us to the state $\setof{0,1} \cup \emptyset = \setof{0,1}$.
This means that $\setof{0,1}$ is connected to itself by an $a$-loop.
At this point, there are no other states to look at.
To complete the construction, we mark $\setof{0,1}$ as a final state because it contains the final state $1$.

<br>
The determinized FSA is shown below.
Note that it looks exactly like the deterministic one above, with the only difference being the names of states.

\input_med{./aplus_nondet_det.tikz}
\end{example}

\begin{example}
Consider the slightly more complicated FSA below.

\input_med{./nondet_complex.tikz}

Determinization yields the equivalent automaton below:

\input_med{./nondet_complex_det.tikz}
\end{example}

\begin{exercise}
In the previous two examples, determinization does not increase the size of the automaton.
in general, though, determinization can cause an exponential blow-up.
As a concrete example of this, determinize the automaton below.

\input_med{./nondet_blowup.tikz}
\end{exercise}

## Adding a Sink

There are two reasons why a string $s$ might not be recognized by an automaton $A$: either there is a run of $A$ over $s$ that is not accepting, or there is no run at all because at some point we reach a state from which no transition can be taken.

\begin{example}
Consider once more the automaton for $\String{a(baa)^*}$.

\input_med{./abaa.tikz}

This automaton rejects $\String{ab}$ because the run for this string ends in state $2$, which is not a final state.
But it also rejects $\String{abb}$ because there is no $b$-transition from $2$.
\end{example}

It is sometimes convenient to eliminate the latter case by adding a *sink state*.
For every state $q$ that currently has no $\sigma$-transition emanating from it, we add a $\sigma$-transition to the sink state.
From the sink state, every $\sigma$-transition can only take us back to the sink state.
So once we end up in the sink state, we are trapped and cannot reach a final state anymore.
Adding a sink state ensures that there is a run for every $s \in \Sigma^*$ without altering the recognized string language.
Hence the only distinction between recognized and rejected strings is whether their run is accepting, not whether they have a run at all.

\begin{example}
Here is the result of adding a sink state to the automaton above:

\input_med{./abaa_sink.tikz}
\end{example}
